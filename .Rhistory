inner_join(get_sentiments("nrc")) %>%
filter(sentiment %in% c("positive", "negative")) %>%
mutate(method = "NRC")) %>%
count(method, index = track_title, album, artist, sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = 0) %>%
mutate(sentiment = positive - negative)
lyrics_sentiments = bind_rows(lyrics_afinn, lyrics_bing_and_nrc)
# p for pivoted
lyrics_afinn_p = lyrics_sentiments %>%
filter(method == "AFINN") %>%
pivot_wider(names_from = method, values_from = sentiment)
lyrics_bing_p = lyrics_sentiments %>%
filter(method == "Bing") %>%
pivot_wider(names_from = method, values_from = sentiment)
lyrics_nrc_p = lyrics_sentiments %>%
filter(method == "NRC") %>%
pivot_wider(names_from = method, values_from = sentiment)
lyrics_sentiments_p = lyrics_afinn_p %>%
inner_join(lyrics_bing_p, by = c("index", "artist", "album")) %>%
inner_join(lyrics_nrc_p, by = c("index", "artist", "album"))
# c for condensed: remove unnecessary columns
lyrics_sents_p_c = lyrics_sentiments_p %>%
select(index, artist, album, AFINN, Bing, NRC) %>%
ungroup()
artist_song_counts = lyrics_sents_p_c %>%
count(artist)
lyrics_sents_totals = lyrics_sents_p_c %>%
group_by(artist) %>%
summarise(AFINN_total = sum(AFINN), Bing_total = sum(Bing), NRC_total = sum(NRC))
lyrics_sents_p_c_scaled = lyrics_sents_p_c %>%
mutate(across(c("AFINN", "Bing", "NRC"), scale_col)) %>%
mutate(AFINN_cdf = cume_dist(AFINN),
Bing_cdf = cume_dist(Bing),
NRC_cdf = cume_dist(NRC))
scale_col = function(x, na.rm = FALSE) {
(x - mean(x, na.rm = na.rm)) / sd(x, na.rm)
}
artist_song_avgs_scaled = lyrics_sents_totals %>%
inner_join(artist_song_counts, by = "artist") %>%
mutate(AFINN_song_avg = AFINN_total / n,
Bing_song_avg = Bing_total / n,
NRC_song_avg = NRC_total / n,
n_songs = n) %>%
mutate(across(ends_with("song_avg"), scale_col))
lyrics_sents_p_c_scaled = lyrics_sents_p_c %>%
mutate(across(c("AFINN", "Bing", "NRC"), scale_col)) %>%
mutate(AFINN_cdf = cume_dist(AFINN),
Bing_cdf = cume_dist(Bing),
NRC_cdf = cume_dist(NRC))
very_neg_sd_AFINN = lyrics_sents_p_c_scaled %>%
filter(AFINN < -2)
very_neg_sd_Bing = lyrics_sents_p_c_scaled %>%
filter(Bing < -2)
very_neg_sd_NRC = lyrics_sents_p_c_scaled %>%
filter(NRC < -2)
very_neg_sd_all = lyrics_sents_p_c_scaled %>%
filter(AFINN < -2 & Bing < -2 & NRC < -2)
very_neg_sd_prop_all = (very_neg_sd_all %>% nrow()) %>%
"/"(lyrics_sents_p_c_scaled %>% nrow())
very_neg_cdf_AFINN = lyrics_sents_p_c_scaled %>%
filter(AFINN_cdf < 0.1)
very_neg_cdf_Bing = lyrics_sents_p_c_scaled %>%
filter(Bing_cdf < 0.1)
very_neg_cdf_NRC = lyrics_sents_p_c_scaled %>%
filter(NRC_cdf < 0.1)
very_neg_cdf_all = lyrics_sents_p_c_scaled %>%
filter(AFINN_cdf < 0.1 & Bing_cdf < 0.1 & NRC_cdf < 0.1)
very_neg_cdf_prop_all = (very_neg_cdf_all %>% nrow()) %>%
"/"(lyrics_sents_p_c_scaled %>% nrow())
very_neg_sd_list = list(very_neg_sd_AFINN, very_neg_sd_Bing, very_neg_sd_NRC, very_neg_sd_all)
very_neg_cdf_list = list(very_neg_cdf_AFINN, very_neg_cdf_Bing, very_neg_cdf_NRC, very_neg_cdf_all)
sd_counts = map(very_neg_sd_list, count, artist)
cdf_counts = map(very_neg_cdf_list, count, artist)
very_neg_sd_AFINN = lyrics_sents_p_c_scaled %>%
filter(AFINN < -2)
very_neg_sd_Bing = lyrics_sents_p_c_scaled %>%
filter(Bing < -2)
very_neg_sd_NRC = lyrics_sents_p_c_scaled %>%
filter(NRC < -2)
very_neg_sd_all = lyrics_sents_p_c_scaled %>%
filter(AFINN < -2 & Bing < -2 & NRC < -2)
# cherry-picked sentiment dictionary
very_neg_sd_prop_AFINN = (very_neg_sd_AFINN %>% nrow()) %>%
"/"(lyrics_sents_p_c_scaled %>% nrow())
very_neg_sd_prop_all = (very_neg_sd_all %>% nrow()) %>%
"/"(lyrics_sents_p_c_scaled %>% nrow())
very_neg_cdf_AFINN = lyrics_sents_p_c_scaled %>%
filter(AFINN_cdf < 0.1)
very_neg_cdf_Bing = lyrics_sents_p_c_scaled %>%
filter(Bing_cdf < 0.1)
very_neg_cdf_NRC = lyrics_sents_p_c_scaled %>%
filter(NRC_cdf < 0.1)
very_neg_cdf_all = lyrics_sents_p_c_scaled %>%
filter(AFINN_cdf < 0.1 & Bing_cdf < 0.1 & NRC_cdf < 0.1)
# cherry-picked sentiment dictionary
very_neg_sd_prop_AFINN = (very_neg_cdf_AFINN %>% nrow()) %>%
"/"(lyrics_sents_p_c_scaled %>% nrow())
very_neg_cdf_prop_all = (very_neg_cdf_all %>% nrow()) %>%
"/"(lyrics_sents_p_c_scaled %>% nrow())
very_neg_cdf_all
univ_props = gen_props(very_neg_cdf_all, very_neg_sd_all)
gen_props = function(very_neg_counts_cdf, very_neg_counts_sd) {
artist_props = very_neg_counts_cdf %>%
inner_join(artist_song_counts, by = "artist") %>%
rename(very_neg_cdf = n.x, total_songs = n.y) %>%
inner_join(very_neg_counts_sd, by = "artist") %>%
rename(very_neg_sd = n) %>%
mutate(cdf_prop = very_neg_cdf / total_songs, sd_prop = very_neg_sd / total_songs)
return(artist_props)
}
univ_props = gen_props(very_neg_cdf_all, very_neg_sd_all)
univ_props = gen_props(very_neg_cdf_all, very_neg_sd_all)
```{r}
artist_counts_cdf = very_neg_cdf_all %>%
count(artist)
artist_counts_sd = very_neg_sd_all %>%
count(artist)
artist_counts_cdf = very_neg_cdf_all %>%
count(artist)
artist_counts_sd = very_neg_sd_all %>%
count(artist)
artist_props = artist_counts_cdf %>%
inner_join(artist_song_counts, by = "artist") %>%
rename(very_neg_cdf = n.x, total_songs = n.y) %>%
inner_join(artist_counts_sd, by = "artist") %>%
rename(very_neg_sd = n) %>%
mutate(cdf_prop = very_neg_cdf / total_songs, sd_prop = very_neg_sd / total_songs)
artist_props
artist_afinn_props = artist_counts_afinn_cdf %>%
inner_join(artist_song_counts, by = "artist") %>%
rename(very_neg_cdf = n.x, total_songs = n.y) %>%
inner_join(artist_counts_afinn_sd, by = "artist") %>%
rename(very_neg_sd = n) %>%
mutate(cdf_prop = very_neg_cdf / total_songs, sd_prop = very_neg_sd / total_songs)
# afinn
artist_counts_afinn_cdf = very_neg_cdf_AFINN %>%
count(artist)
artist_counts_afinn_sd = very_neg_sd_AFINN %>%
count(artist)
artist_afinn_props = artist_counts_afinn_cdf %>%
inner_join(artist_song_counts, by = "artist") %>%
rename(very_neg_cdf = n.x, total_songs = n.y) %>%
inner_join(artist_counts_afinn_sd, by = "artist") %>%
rename(very_neg_sd = n) %>%
mutate(cdf_prop = very_neg_cdf / total_songs, sd_prop = very_neg_sd / total_songs)
highlight_artist = function(df, artist_name) {
df %>%
mutate(highlight = ifelse(artist == artist_name, "yes", "no")) %>%
return()
}
artist_highlight_bar = function() {
list(geom_col(),
coord_flip(),
scale_fill_manual(values = c("yes" = "tomato", "no" = "gray"),
guide = FALSE)
)
}
prop_dfs[[4]] %>%
highlight_artist("Taylor Swift") %>%
ggplot(aes(x = reorder(artist, cdf_prop), y = cdf_prop, fill = highlight)) +
artist_highlight_bar() +
labs(x = "Artist", y = "Proportion of very negative songs",
title = "Artists ranked by proportion of very negative songs (CDF)",
caption = "Threshold determined by CDF")
artist_afinn_props %>%
highlight_artist("Taylor Swift") %>%
ggplot(aes(x = reorder(artist, cdf_prop), y = cdf_prop, fill = highlight)) +
artist_highlight_bar() +
labs(x = "Artist", y = "Proportion of very negative songs",
title = "Artists ranked by proportion of very negative songs (CDF)",
caption = "Threshold determined by CDF")
artist_afinn_props %>%
highlight_artist("Taylor Swift") %>%
ggplot(aes(x = reorder(artist, sd_prop), y = sd_prop, fill = highlight)) +
artist_highlight_bar() +
labs(x = "Artist", y = "Proportion of very negative songs", title = "Artists ranked by proportion of very negative songs (SD)", caption = "Threshold determined by standard deviation")
very_neg_sd_list = list(very_neg_sd_AFINN, very_neg_sd_Bing, very_neg_sd_NRC, very_neg_sd_all)
very_neg_cdf_list = list(very_neg_cdf_AFINN, very_neg_cdf_Bing, very_neg_cdf_NRC, very_neg_cdf_all)
sd_counts = map(very_neg_sd_list, count, artist)
cdf_counts = map(very_neg_cdf_list, count, artist)
sd_counts
prop_dfs = map2(cdf_counts, sd_counts, gen_props)
prop_dfs[[1]] %>%
highlight_artist("Taylor Swift") %>%
ggplot(aes(x = reorder(artist, cdf_prop), y = cdf_prop, fill = highlight)) +
artist_highlight_bar() +
labs(x = "Artist", y = "Proportion of very negative songs",
title = "Artists ranked by proportion of very negative songs (CDF)",
caption = "Threshold determined by CDF")
artist_afinn_props %>%
highlight_artist("Taylor Swift") %>%
ggplot(aes(x = reorder(artist, sd_prop), y = sd_prop, fill = highlight)) +
artist_highlight_bar() +
labs(x = "Artist", y = "Proportion of very negative songs", title = "Artists ranked by proportion of very negative songs (SD)", caption = "Threshold determined by standard deviation")
prop_dfs[[1]] %>%
highlight_artist("Taylor Swift") %>%
ggplot(aes(x = reorder(artist, sd_prop), y = sd_prop, fill = highlight)) +
artist_highlight_bar() +
labs(x = "Artist", y = "Proportion of very negative songs", title = "Artists ranked by proportion of very negative songs (SD)", caption = "Threshold determined by standard deviation")
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidytext)
library(gridExtra)
artist_albums = read_csv("artist_albums.csv")
pop_lyrics = read_csv("pop_lyrics.csv")
pop_lyrics_by_word = pop_lyrics %>%
unnest_tokens(word, lyric)
lyrics_afinn = pop_lyrics_by_word %>%
inner_join(get_sentiments("afinn")) %>%
group_by(index = track_title, album, artist) %>%
summarise(sentiment = sum(value)) %>%
mutate(method = "AFINN")
lyrics_bing_and_nrc = bind_rows(pop_lyrics_by_word %>%
inner_join(get_sentiments("bing")) %>%
mutate(method = "Bing"),
pop_lyrics_by_word %>%
inner_join(get_sentiments("nrc")) %>%
filter(sentiment %in% c("positive", "negative")) %>%
mutate(method = "NRC")) %>%
count(method, index = track_title, album, artist, sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = 0) %>%
mutate(sentiment = positive - negative)
lyrics_sentiments = bind_rows(lyrics_afinn, lyrics_bing_and_nrc)
# p for pivoted
lyrics_afinn_p = lyrics_sentiments %>%
filter(method == "AFINN") %>%
pivot_wider(names_from = method, values_from = sentiment)
lyrics_bing_p = lyrics_sentiments %>%
filter(method == "Bing") %>%
pivot_wider(names_from = method, values_from = sentiment)
lyrics_nrc_p = lyrics_sentiments %>%
filter(method == "NRC") %>%
pivot_wider(names_from = method, values_from = sentiment)
lyrics_sentiments_p = lyrics_afinn_p %>%
inner_join(lyrics_bing_p, by = c("index", "artist", "album")) %>%
inner_join(lyrics_nrc_p, by = c("index", "artist", "album"))
# c for condensed: remove unnecessary columns
lyrics_sents_p_c = lyrics_sentiments_p %>%
select(index, artist, album, AFINN, Bing, NRC) %>%
ungroup()
artist_song_counts = lyrics_sents_p_c %>%
count(artist)
lyrics_sents_totals = lyrics_sents_p_c %>%
group_by(artist) %>%
summarise(AFINN_total = sum(AFINN), Bing_total = sum(Bing), NRC_total = sum(NRC))
scale_col = function(x, na.rm = FALSE) {
(x - mean(x, na.rm = na.rm)) / sd(x, na.rm)
}
artist_song_avgs_scaled = lyrics_sents_totals %>%
inner_join(artist_song_counts, by = "artist") %>%
mutate(AFINN_song_avg = AFINN_total / n,
Bing_song_avg = Bing_total / n,
NRC_song_avg = NRC_total / n,
n_songs = n) %>%
mutate(across(ends_with("song_avg"), scale_col))
# afinn_plot = artist_song_avgs_scaled %>%
#   ggplot(aes(AFINN_song_avg)) +
#   geom_freqpoly(binwidth = 0.2)
#
# bing_plot = artist_song_avgs_scaled %>%
#   ggplot(aes(Bing_song_avg)) +
#   geom_freqpoly(binwidth = 0.2)
#
# nrc_plot = artist_song_avgs_scaled %>%
#   ggplot(aes(NRC_song_avg)) +
#   geom_freqpoly(binwidth = 0.2)
# grid.arrange(afinn_plot, bing_plot, nrc_plot, nrow = 3)
# lyrics_sentiments %>%
#   ggplot(aes(sentiment)) +
#   geom_freqpoly(binwidth = 0.5) +
#   facet_wrap(~method)
# artist_song_avgs_scaled %>%
#   mutate(AFINN_cdf = cume_dist(AFINN),
#          Bing_cdf = cume_dist(Bing),
#          NRC_cdf = cume_dist(NRC)) %>%
#   filter(AFINN_cdf < 0.05 & Bing_cdf < 0.05 & NRC_cdf < 0.05)
lyrics_sents_p_c_scaled = lyrics_sents_p_c %>%
mutate(across(c("AFINN", "Bing", "NRC"), scale_col)) %>%
mutate(AFINN_cdf = cume_dist(AFINN),
Bing_cdf = cume_dist(Bing),
NRC_cdf = cume_dist(NRC))
very_neg_sd_AFINN = lyrics_sents_p_c_scaled %>%
filter(AFINN < -2)
very_neg_sd_Bing = lyrics_sents_p_c_scaled %>%
filter(Bing < -2)
very_neg_sd_NRC = lyrics_sents_p_c_scaled %>%
filter(NRC < -2)
very_neg_sd_all = lyrics_sents_p_c_scaled %>%
filter(AFINN < -2 & Bing < -2 & NRC < -2)
# cherry-picked sentiment dictionary
very_neg_sd_prop_AFINN = (very_neg_sd_AFINN %>% nrow()) %>%
"/"(lyrics_sents_p_c_scaled %>% nrow())
very_neg_sd_prop_all = (very_neg_sd_all %>% nrow()) %>%
"/"(lyrics_sents_p_c_scaled %>% nrow())
very_neg_cdf_AFINN = lyrics_sents_p_c_scaled %>%
filter(AFINN_cdf < 0.1)
very_neg_cdf_Bing = lyrics_sents_p_c_scaled %>%
filter(Bing_cdf < 0.1)
very_neg_cdf_NRC = lyrics_sents_p_c_scaled %>%
filter(NRC_cdf < 0.1)
very_neg_cdf_all = lyrics_sents_p_c_scaled %>%
filter(AFINN_cdf < 0.1 & Bing_cdf < 0.1 & NRC_cdf < 0.1)
# cherry-picked sentiment dictionary
very_neg_sd_prop_AFINN = (very_neg_cdf_AFINN %>% nrow()) %>%
"/"(lyrics_sents_p_c_scaled %>% nrow())
very_neg_cdf_prop_all = (very_neg_cdf_all %>% nrow()) %>%
"/"(lyrics_sents_p_c_scaled %>% nrow())
very_neg_sd_list = list(very_neg_sd_AFINN, very_neg_sd_Bing, very_neg_sd_NRC, very_neg_sd_all)
very_neg_cdf_list = list(very_neg_cdf_AFINN, very_neg_cdf_Bing, very_neg_cdf_NRC, very_neg_cdf_all)
sd_counts = map(very_neg_sd_list, count, artist)
cdf_counts = map(very_neg_cdf_list, count, artist)
gen_props = function(very_neg_counts_cdf, very_neg_counts_sd) {
artist_props = very_neg_counts_cdf %>%
inner_join(artist_song_counts, by = "artist") %>%
rename(very_neg_cdf = n.x, total_songs = n.y) %>%
inner_join(very_neg_counts_sd, by = "artist") %>%
rename(very_neg_sd = n) %>%
mutate(cdf_prop = very_neg_cdf / total_songs, sd_prop = very_neg_sd / total_songs)
return(artist_props)
}
# univ_props = gen_props(cdf_counts[[4]], sd_counts[[4]])
prop_dfs = map2(cdf_counts, sd_counts, gen_props)
highlight_artist = function(df, artist_name) {
df %>%
mutate(highlight = ifelse(artist == artist_name, "yes", "no")) %>%
return()
}
artist_highlight_bar = function() {
list(geom_col(),
coord_flip(),
scale_fill_manual(values = c("yes" = "tomato", "no" = "gray"),
guide = FALSE)
)
}
prop_dfs[[1]] %>%
highlight_artist("Taylor Swift") %>%
ggplot(aes(x = reorder(artist, cdf_prop), y = cdf_prop, fill = highlight)) +
artist_highlight_bar() +
labs(x = "Artist", y = "Proportion of very negative songs",
title = "Artists ranked by proportion of very negative songs (CDF)",
caption = "Threshold determined by CDF")
cutoff_sentiments = c("AFINN", "Bing", "NRC", "All")
prop_dfs[[1]] %>%
highlight_artist("Taylor Swift") %>%
ggplot(aes(x = reorder(artist, cdf_prop), y = cdf_prop, fill = highlight)) +
artist_highlight_bar() +
labs(x = "Artist", y = "Proportion of very negative songs",
title = paste("Artists ranked by proportion of very negative songs: ", cutoff_sentimnts[1]),
caption = "Threshold determined by CDF")
prop_dfs[[1]] %>%
highlight_artist("Taylor Swift") %>%
ggplot(aes(x = reorder(artist, cdf_prop), y = cdf_prop, fill = highlight)) +
artist_highlight_bar() +
labs(x = "Artist", y = "Proportion of very negative songs",
title = paste("Artists ranked by proportion of very negative songs: ", cutoff_sentiments[1]),
caption = "Threshold determined by CDF")
prop_dfs[[1]] %>%
highlight_artist("Taylor Swift") %>%
ggplot(aes(x = reorder(artist, cdf_prop), y = cdf_prop, fill = highlight)) +
artist_highlight_bar() +
labs(x = "Artist", y = "Proportion of very negative songs",
title = paste("Artists ranked by proportion of very negative songs:", cutoff_sentiments[1]),
caption = "Threshold determined by CDF")
?paste
?reorder
afinn_cdf_plot = prop_dfs[[1]] %>%
highlight_artist("Taylor Swift") %>%
ggplot(aes(x = reorder(artist, cdf_prop), y = cdf_prop, fill = highlight)) +
artist_highlight_bar() +
labs(x = "Artist", y = "Proportion of very negative songs",
title = paste("Artists ranked by proportion of very negative songs:", cutoff_sentiments[1]),
caption = "Threshold determined by CDF")
bing_cdf_plot = prop_dfs[[2]] %>%
highlight_artist("Taylor Swift") %>%
ggplot(aes(x = reorder(artist, cdf_prop), y = cdf_prop, fill = highlight)) +
artist_highlight_bar() +
labs(x = "Artist", y = "Proportion of very negative songs",
title = paste("Artists ranked by proportion of very negative songs:", cutoff_sentiments[2]),
caption = "Threshold determined by CDF")
nrc_cdf_plot = prop_dfs[[3]] %>%
highlight_artist("Taylor Swift") %>%
ggplot(aes(x = reorder(artist, cdf_prop), y = cdf_prop, fill = highlight)) +
artist_highlight_bar() +
labs(x = "Artist", y = "Proportion of very negative songs",
title = paste("Artists ranked by proportion of very negative songs:", cutoff_sentiments[3]),
caption = "Threshold determined by CDF")
univ_cdf_plot = prop_dfs[[4]] %>%
highlight_artist("Taylor Swift") %>%
ggplot(aes(x = reorder(artist, cdf_prop), y = cdf_prop, fill = highlight)) +
artist_highlight_bar() +
labs(x = "Artist", y = "Proportion of very negative songs",
title = paste("Artists ranked by proportion of very negative songs:", cutoff_sentiments[4]),
caption = "Threshold determined by CDF")
grid.arrange(afinn_cdf_plot, bing_cdf_plot, nrc_cdf_plot, univ_cdf_plot)
afinn_sd_plot = prop_dfs[[1]] %>%
highlight_artist("Taylor Swift") %>%
ggplot(aes(x = reorder(artist, sd_prop), y = sd_prop, fill = highlight)) +
artist_highlight_bar() +
labs(x = "Artist", y = "Proportion of very negative songs",
title = paste("Artists ranked by proportion of very negative songs:", cutoff_sentiments[1]),
caption = "Threshold determined by standard deviation")
bing_sd_plot = prop_dfs[[2]] %>%
highlight_artist("Taylor Swift") %>%
ggplot(aes(x = reorder(artist, sd_prop), y = sd_prop, fill = highlight)) +
artist_highlight_bar() +
labs(x = "Artist", y = "Proportion of very negative songs",
title = paste("Artists ranked by proportion of very negative songs:", cutoff_sentiments[2]),
caption = "Threshold determined by standard deviation")
nrc_sd_plot = prop_dfs[[3]] %>%
highlight_artist("Taylor Swift") %>%
ggplot(aes(x = reorder(artist, sd_prop), y = sd_prop, fill = highlight)) +
artist_highlight_bar() +
labs(x = "Artist", y = "Proportion of very negative songs",
title = paste("Artists ranked by proportion of very negative songs:", cutoff_sentiments[3]),
caption = "Threshold determined by standard deviation")
univ_sd_plot = prop_dfs[[4]] %>%
highlight_artist("Taylor Swift") %>%
ggplot(aes(x = reorder(artist, sd_prop), y = sd_prop, fill = highlight)) +
artist_highlight_bar() +
labs(x = "Artist", y = "Proportion of very negative songs",
title = paste("Artists ranked by proportion of very negative songs:", cutoff_sentiments[4]),
caption = "Threshold determined by standard deviation")
grid.arrange()
grid.arrange(afinn_sd_plot, bing_sd_plot, nrc_sd_plot, univ_sd_plot)
?grid.arrange
grid.arrange(afinn_cdf_plot, bing_cdf_plot, nrc_cdf_plot, univ_cdf_plot, nrow = 4)
?ggplot
grid.arrange(afinn_cdf_plot, bing_cdf_plot)
grid.arrange(afinn_sd_plot, bing_sd_plot)
install.packages("blogdown")
install.packages("rtweet")
library(rtweet)
library(readr)
# whichever user you want to analyze
username = "zhang_carson"
friends = (get_friends(username)$user_id %>% lookup_users())$screen_name
write_lines(friends, "friends_all.txt")
?interactive
library(rtweet)
library(readr)
# n_accts = args[1]
n_accts = 10
handled_users = read_lines("handled_users.txt")
friends_all = read_lines("friends_all.txt")
unhandled_users = friends_all[!(friends_all %in% handled_users)]
users_to_handle = sample(unhandled_users, n_accts)
print(users_to_handle)
input = ""
while (input != "Y" && input != "N") {
input = readline("Handle all automatically? [Y/N]")
if (input == "Y") {
write_lines(users_to_handle, "handled_users.txt")
}
if (input == "N") {
print("Add the handles you want to handle to handled_users.txt, one handle per line.")
}
}
library(rtweet)
library(readr)
# n_accts = args[1]
n_accts = 10
handled_users = read_lines("handled_users.txt")
setwd('C:/Users/carso/ctci/handle_tweets')
library(rtweet)
library(readr)
# n_accts = args[1]
n_accts = 10
handled_users = read_lines("handled_users.txt")
friends_all = read_lines("friends_all.txt")
unhandled_users = friends_all[!(friends_all %in% handled_users)]
users_to_handle = sample(unhandled_users, n_accts)
print(users_to_handle)
input = ""
while (input != "Y" && input != "N") {
input = readline("Handle all automatically? [Y/N]")
if (input == "Y") {
write_lines(users_to_handle, "handled_users.txt")
}
if (input == "N") {
print("Add the handles you want to handle to handled_users.txt, one handle per line.")
}
}
library(rtweet)
library(readr)
# n_accts = args[1]
n_accts = 10
handled_users = read_lines("handled_users.txt")
friends_all = read_lines("friends_all.txt")
unhandled_users = friends_all[!(friends_all %in% handled_users)]
users_to_handle = sample(unhandled_users, n_accts)
print(users_to_handle)
input = ""
while (input != "Y" && input != "N") {
input = readline("Handle all automatically? [Y/N]")
if (input == "Y") {
write_lines(users_to_handle, "handled_users.txt")
}
if (input == "N") {
print("Add the handles you want to handle to handled_users.txt, one handle per line.")
}
}
?write_lines
while (input != "Y" && input != "N") {
input = readline("Handle all automatically? [Y/N]")
if (input == "Y") {
write_lines(users_to_handle, "handled_users.txt", append = TRUE)
}
if (input == "N") {
print("Add the handles you want to handle to handled_users.txt, one handle per line.")
}
}
